@model psiconexao.Models.Consulta

@{
    ViewData["Title"] = "Criar Consulta";
}

<h1>Criar Consulta</h1>

<h4>Consulta</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Data" class="control-label"></label>
                <input asp-for="Data" class="form-control" id="input-data-consulta" />
                <span asp-validation-for="Data" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Hora" class="control-label"></label>
                <select asp-for="Hora" class="form-control" id="input-hora-consulta">
                    <option value="">Selecione um horário</option>
                </select>
                <span asp-validation-for="Hora" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PsicologoId" class="control-label"></label>
                <select asp-for="PsicologoId" class="form-control" asp-items="ViewBag.PsicologoId"></select>
            </div>
            <div class="form-group">
                <label asp-for="PacienteId" class="control-label"></label>
                <select asp-for="PacienteId" class="form-control" asp-items="ViewBag.PacienteId"></select>
            </div>
            <div class="form-group">
                <label asp-for="Estado" class="control-label"></label>
                <select asp-for="Estado" class="form-control" asp-items="Html.GetEnumSelectList<Estado>()"></select>
                <span asp-validation-for="Estado" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Criar" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Voltar para a Lista</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', async function () {
            const inputDataConsulta = document.querySelector("#input-data-consulta");
            const inputHoraConsulta = document.querySelector("#input-hora-consulta");
            const today = new Date().toISOString().split("T")[0];
            const selectedDate = localStorage.getItem("selectedDate");

            // Define a data mínima como hoje para impedir datas passadas
            inputDataConsulta.setAttribute("min", today);

            const psicologoId = document.querySelector("select[name='PsicologoId']").value;
            let availableDates = [];
            let disponibilidadeHorarios = {};

            if (psicologoId) {
                // Obter disponibilidades do psicólogo
                const response = await fetch(`/Disponibilidades/GetDisponibilidades?psicologoId=${psicologoId}`);
                const disponibilidades = await response.json();

                console.log("Disponibilidades recebidas:", disponibilidades);

                // Expandir intervalos de datas e horários para obter apenas datas válidas
                disponibilidades.forEach(d => {
                    const startDate = new Date(d.start.split("T")[0]);
                    const endDate = new Date(d.end.split("T")[0]);
                    const startTime = d.start.split("T")[1];
                    const endTime = d.end.split("T")[1];

                    for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
                        const formattedDate = date.toISOString().split("T")[0];
                        if (formattedDate >= today) { // Garantir apenas datas futuras ou iguais a hoje
                            availableDates.push(formattedDate);
                            if (!disponibilidadeHorarios[formattedDate]) {
                                disponibilidadeHorarios[formattedDate] = { start: startTime, end: endTime };
                            }
                        }
                    }
                });
                console.log("Datas disponíveis:", availableDates);
                console.log("Horários de disponibilidade por data:", disponibilidadeHorarios);
            }

            // Função para preencher os horários disponíveis, excluindo horários ocupados
            async function preencherHorariosDisponiveis(data) {
                inputHoraConsulta.innerHTML = '<option value="">Selecione um horário</option>';

                if (disponibilidadeHorarios[data]) {
                    const { start, end } = disponibilidadeHorarios[data];
                    const startTime = new Date(`1970-01-01T${start}`);
                    const endTime = new Date(`1970-01-01T${end}`);
                    let ocupados = new Set();

                    // Formatando a data para passar na URL
                    const formattedDate = new Date(data).toISOString().split("T")[0];

                    // Carregar horários de consultas já agendadas para essa data
                    const response = await fetch(`/Disponibilidades/GetConsultasParaData?psicologoId=${psicologoId}&data=${formattedDate}`);
                    if (response.ok) {
                        const consultas = await response.json();
                        console.log("Consultas agendadas para a data:", formattedDate, consultas);

                        // Marcar horários ocupados em intervalos de 59 minutos
                        consultas.forEach(c => {
                            const horaInicio = new Date(`1970-01-01T${c.horaInicio}`);

                            // Calcular os minutos de início e fim da consulta
                            const minutosInicio = horaInicio.getHours() * 60 + horaInicio.getMinutes();
                            const minutosFim = minutosInicio + 59;

                            // Adicionar cada intervalo de 30 minutos entre o início e o fim ao conjunto de ocupados
                            for (let minutos = minutosInicio; minutos <= minutosFim; minutos += 30) {
                                const horas = Math.floor(minutos / 60).toString().padStart(2, '0');
                                const minutosRestantes = (minutos % 60).toString().padStart(2, '0');
                                ocupados.add(`${horas}:${minutosRestantes}`);
                            }
                        });
                    } else {
                        console.error("Erro ao carregar consultas:", response.status);
                    }

                    console.log("Horários ocupados (atualizado):", Array.from(ocupados));

                    // Preencher horários disponíveis, excluindo os horários ocupados
                    for (let time = new Date(startTime); time <= endTime; time.setMinutes(time.getMinutes() + 30)) {
                        const hours = time.getHours().toString().padStart(2, '0');
                        const minutes = time.getMinutes().toString().padStart(2, '0');
                        const formattedTime = `${hours}:${minutes}`;
                        if (!ocupados.has(formattedTime)) {
                            const option = document.createElement("option");
                            option.value = formattedTime;
                            option.textContent = formattedTime;
                            inputHoraConsulta.appendChild(option);
                        }
                    }

                    console.log("Horários disponíveis para seleção (após exclusão de ocupados):", inputHoraConsulta.innerHTML);
                }
            }

            // Exibir apenas as datas disponíveis
            inputDataConsulta.addEventListener('focus', function () {
                if (availableDates.length > 0) {
                    inputDataConsulta.setAttribute("min", availableDates[0]);
                    inputDataConsulta.setAttribute("max", availableDates[availableDates.length - 1]);
                }
            });

            // Preencher campo de data com a data selecionada e atualizar horários, se disponível
            if (selectedDate && availableDates.includes(selectedDate)) {
                inputDataConsulta.value = selectedDate;
                await preencherHorariosDisponiveis(selectedDate);
                localStorage.removeItem("selectedDate");
            }

            // Validação e preenchimento de horários com base na data selecionada
            inputDataConsulta.addEventListener('input', async function () {
                const selectedDate = inputDataConsulta.value;

                if (!availableDates.includes(selectedDate)) {
                    inputDataConsulta.value = ""; // Limpar se a data não for disponível
                    alert("A data selecionada não está disponível.");
                    inputHoraConsulta.innerHTML = '<option value="">Selecione um horário</option>'; // Limpar horários
                    return;
                }

                // Preencher horários disponíveis para a data selecionada
                await preencherHorariosDisponiveis(selectedDate);
            });
        });
    </script>
}
